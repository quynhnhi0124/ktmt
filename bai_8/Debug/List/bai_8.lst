
AVRASM ver. 2.1.30  C:\Users\BVCN 88\OneDrive\Máy tính\KTMT\bai_8\Debug\List\bai_8.asm Fri Nov 13 10:42:55 2020

C:\Users\BVCN 88\OneDrive\Máy tính\KTMT\bai_8\Debug\List\bai_8.asm(1090): warning: Register r5 already defined by the .DEF directive
C:\Users\BVCN 88\OneDrive\Máy tính\KTMT\bai_8\Debug\List\bai_8.asm(1091): warning: Register r4 already defined by the .DEF directive
C:\Users\BVCN 88\OneDrive\Máy tính\KTMT\bai_8\Debug\List\bai_8.asm(1092): warning: Register r7 already defined by the .DEF directive
C:\Users\BVCN 88\OneDrive\Máy tính\KTMT\bai_8\Debug\List\bai_8.asm(1093): warning: Register r6 already defined by the .DEF directive
C:\Users\BVCN 88\OneDrive\Máy tính\KTMT\bai_8\Debug\List\bai_8.asm(1094): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _dht_nhiet_do=R5
                 	.DEF _dht_do_am=R4
                 	.DEF __lcd_x=R7
                 	.DEF __lcd_y=R6
                 	.DEF __lcd_maxx=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0068 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G102:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G102:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
00004f 6f44
000050 6120
000051 206d
000052 7525      	.DB  0x44,0x6F,0x20,0x61,0x6D,0x20,0x25,0x75
000053 4e00
000054 6968
000055 7465
000056 6420      	.DB  0x0,0x4E,0x68,0x69,0x65,0x74,0x20,0x64
000057 206f
000058 7525
C:\Users\BVCN 88\OneDrive\Máy tính\KTMT\bai_8\Debug\List\bai_8.asm(1148): warning: .cseg .db misalignment - padding zero byte
000059 0000      	.DB  0x6F,0x20,0x25,0x75,0x0
                 _0x2000003:
00005a c080      	.DB  0x80,0xC0
                 _0x2020060:
C:\Users\BVCN 88\OneDrive\Máy tính\KTMT\bai_8\Debug\List\bai_8.asm(1152): warning: .cseg .db misalignment - padding zero byte
00005b 0001      	.DB  0x1
                 _0x2020000:
00005c 4e2d
00005d 4e41
00005e 4900
00005f 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\BVCN 88\OneDrive\Máy tính\KTMT\bai_8\Debug\List\bai_8.asm(1155): warning: .cseg .db misalignment - padding zero byte
000060 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000061 0002      	.DW  0x02
000062 0510      	.DW  __base_y_G100
000063 00b4      	.DW  _0x2000003*2
                 
000064 0001      	.DW  0x01
000065 0514      	.DW  __seed_G101
000066 00b6      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
000067 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000068 94f8      	CLI
000069 27ee      	CLR  R30
00006a bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00006b e0f1      	LDI  R31,1
00006c bff5      	OUT  MCUCR,R31
00006d bfe5      	OUT  MCUCR,R30
00006e 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
000070 e08d      	LDI  R24,(14-2)+1
000071 e0a2      	LDI  R26,2
000072 27bb      	CLR  R27
                 __CLEAR_REG:
000073 93ed      	ST   X+,R30
000074 958a      	DEC  R24
000075 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000076 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000077 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000078 e0a0      	LDI  R26,LOW(__SRAM_START)
000079 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00007a 93ed      	ST   X+,R30
00007b 9701      	SBIW R24,1
00007c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00007d ece2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00007e e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00007f 9185      	LPM  R24,Z+
000080 9195      	LPM  R25,Z+
000081 9700      	SBIW R24,0
000082 f061      	BREQ __GLOBAL_INI_END
000083 91a5      	LPM  R26,Z+
000084 91b5      	LPM  R27,Z+
000085 9005      	LPM  R0,Z+
000086 9015      	LPM  R1,Z+
000087 01bf      	MOVW R22,R30
000088 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000089 9005      	LPM  R0,Z+
00008a 920d      	ST   X+,R0
00008b 9701      	SBIW R24,1
00008c f7e1      	BRNE __GLOBAL_INI_LOOP
00008d 01fb      	MOVW R30,R22
00008e cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
00008f bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000090 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000091 bfed      	OUT  SPL,R30
000092 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000093 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000094 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000095 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000096 940c 00fe 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;/*
                 ; * bai_8.c
                 ; *
                 ; * Created: 13-Nov-20 9:25:44 AM
                 ; * Author: QuynhNhi
                 ; */
                 ;#include <alcd.h>
                 ;#include <stdint.h>
                 ;#include <stdlib.h>
                 ;#include <stdio.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <font5x7.h>
                 ;#include <io.h>
                 ;
                 ;#define DHT_ER 0
                 ;#define DHT_OK  1
                 ;
                 ;#define BL PORTD.7
                 ;#define DHT_DATA_IN PINB.7
                 ;#define DHT_DATA_OUT PORTB.7
                 ;#define DHT_DDR_DATA DDRB.7
                 ;
                 ;char data[16];
                 ;unsigned char dht_nhiet_do, dht_do_am;
                 ;
                 ;unsigned char DHT_GetTemHumi(unsigned char *tem, unsigned char *humi){
                 ; 0000 001A unsigned char DHT_GetTemHumi(unsigned char *tem, unsigned char *humi){
                 
                 	.CSEG
                 _DHT_GetTemHumi:
                 ; .FSTART _DHT_GetTemHumi
                 ; 0000 001B     unsigned char buffer[5] = {0,0,0,0,0};
                 ; 0000 001C     unsigned char ii,i,checksum;
                 ; 0000 001D 
                 ; 0000 001E     DHT_DDR_DATA = 1; //set la cong ra
000098 93ba      	ST   -Y,R27
000099 93aa      	ST   -Y,R26
00009a 9725      	SBIW R28,5
00009b e0e0      	LDI  R30,LOW(0)
00009c 83e8      	ST   Y,R30
00009d 83e9      	STD  Y+1,R30
00009e 83ea      	STD  Y+2,R30
00009f 83eb      	STD  Y+3,R30
0000a0 83ec      	STD  Y+4,R30
0000a1 940e 0407 	CALL __SAVELOCR4
                 ;	*tem -> Y+11
                 ;	*humi -> Y+9
                 ;	buffer -> Y+4
                 ;	ii -> R17
                 ;	i -> R16
                 ;	checksum -> R19
0000a3 9abf      	SBI  0x17,7
                 ; 0000 001F     DHT_DATA_OUT = 1;
0000a4 9ac7      	SBI  0x18,7
                 ; 0000 0020     delay_us(40);
                +
0000a5 e68b     +LDI R24 , LOW ( 107 )
                +__DELAY_USB_LOOP :
0000a6 958a     +DEC R24
0000a7 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 107
                 ; 0000 0021     DHT_DATA_OUT = 0;
0000a8 98c7      	CBI  0x18,7
                 ; 0000 0022     delay_ms(30);
0000a9 e1ae      	LDI  R26,LOW(30)
0000aa e0b0      	LDI  R27,0
0000ab 940e 03de 	CALL _delay_ms
                 ; 0000 0023     DHT_DATA_OUT = 1;
0000ad 9ac7      	SBI  0x18,7
                 ; 0000 0024     DHT_DDR_DATA = 0; //set la loi vao
0000ae 98bf      	CBI  0x17,7
                 ; 0000 0025     delay_us(40);
                +
0000af e68b     +LDI R24 , LOW ( 107 )
                +__DELAY_USB_LOOP :
0000b0 958a     +DEC R24
0000b1 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 107
                 ; 0000 0026     if(DHT_DATA_IN){
0000b2 9bb7      	SBIS 0x16,7
0000b3 c002      	RJMP _0xD
                 ; 0000 0027         return DHT_ER;
0000b4 e0e0      	LDI  R30,LOW(0)
0000b5 c044      	RJMP _0x20E0003
                 ; 0000 0028     }
                 ; 0000 0029     else while(!(DHT_DATA_IN));
                 _0xD:
                 _0xF:
0000b6 9bb7      	SBIS 0x16,7
0000b7 cffe      	RJMP _0xF
                 ; 0000 002A     delay_us(40);
                +
0000b8 e68b     +LDI R24 , LOW ( 107 )
                +__DELAY_USB_LOOP :
0000b9 958a     +DEC R24
0000ba f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 107
                 ; 0000 002B     if(!DHT_DATA_IN){
0000bb 99b7      	SBIC 0x16,7
0000bc c002      	RJMP _0x12
                 ; 0000 002C         return DHT_ER;
0000bd e0e0      	LDI  R30,LOW(0)
0000be c03b      	RJMP _0x20E0003
                 ; 0000 002D     }
                 ; 0000 002E     else while((DHT_DATA_IN));
                 _0x12:
                 _0x14:
0000bf 99b7      	SBIC 0x16,7
0000c0 cffe      	RJMP _0x14
                 ; 0000 002F     //bat dau doc du lieu
                 ; 0000 0030     for(i=0;i<5;i++){
0000c1 e000      	LDI  R16,LOW(0)
                 _0x18:
0000c2 3005      	CPI  R16,5
0000c3 f500      	BRSH _0x19
                 ; 0000 0031         for(ii=0;ii<8;ii++){
0000c4 e010      	LDI  R17,LOW(0)
                 _0x1B:
0000c5 3018      	CPI  R17,8
0000c6 f4d8      	BRSH _0x1C
                 ; 0000 0032             while ((!DHT_DATA_IN)); //doi data len 1
                 _0x1D:
0000c7 9bb7      	SBIS 0x16,7
0000c8 cffe      	RJMP _0x1D
                 ; 0000 0033             delay_us(30);
                +
0000c9 e580     +LDI R24 , LOW ( 80 )
                +__DELAY_USB_LOOP :
0000ca 958a     +DEC R24
0000cb f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 80
                 ; 0000 0034             if(DHT_DATA_IN){
0000cc 9bb7      	SBIS 0x16,7
0000cd c012      	RJMP _0x20
                 ; 0000 0035                 buffer[i] |=(1<<(7-ii)); //lay7 bit
0000ce 2fe0      	MOV  R30,R16
0000cf e0f0      	LDI  R31,0
0000d0 01de      	MOVW R26,R28
0000d1 9614      	ADIW R26,4
0000d2 0fea      	ADD  R30,R26
0000d3 1ffb      	ADC  R31,R27
0000d4 01bf      	MOVW R22,R30
0000d5 8010      	LD   R1,Z
0000d6 e0e7      	LDI  R30,LOW(7)
0000d7 1be1      	SUB  R30,R17
0000d8 e0a1      	LDI  R26,LOW(1)
0000d9 940e 03f0 	CALL __LSLB12
0000db 29e1      	OR   R30,R1
0000dc 01db      	MOVW R26,R22
0000dd 93ec      	ST   X,R30
                 ; 0000 0036                 while ((DHT_DATA_IN)); //doi data xuong
                 _0x21:
0000de 99b7      	SBIC 0x16,7
0000df cffe      	RJMP _0x21
                 ; 0000 0037             }
                 ; 0000 0038         }
                 _0x20:
0000e0 5f1f      	SUBI R17,-1
0000e1 cfe3      	RJMP _0x1B
                 _0x1C:
                 ; 0000 0039     }
0000e2 5f0f      	SUBI R16,-1
0000e3 cfde      	RJMP _0x18
                 _0x19:
                 ; 0000 003A     //tinh toan checksum
                 ; 0000 003B     checksum = buffer[0] + buffer[1] + buffer[2] + buffer[3];
0000e4 81ed      	LDD  R30,Y+5
0000e5 81ac      	LDD  R26,Y+4
0000e6 0fea      	ADD  R30,R26
0000e7 81ae      	LDD  R26,Y+6
0000e8 0fea      	ADD  R30,R26
0000e9 81af      	LDD  R26,Y+7
0000ea 0fea      	ADD  R30,R26
0000eb 2f3e      	MOV  R19,R30
                 ; 0000 003C     //kiem tra checksum
                 ; 0000 003D     if((checksum) != buffer[4]){
0000ec 85e8      	LDD  R30,Y+8
0000ed 17e3      	CP   R30,R19
0000ee f011      	BREQ _0x24
                 ; 0000 003E         return DHT_ER;
0000ef e0e0      	LDI  R30,LOW(0)
0000f0 c009      	RJMP _0x20E0003
                 ; 0000 003F     }
                 ; 0000 0040     //lay du lieu
                 ; 0000 0041     *tem = buffer[2];
                 _0x24:
0000f1 81ee      	LDD  R30,Y+6
0000f2 85ab      	LDD  R26,Y+11
0000f3 85bc      	LDD  R27,Y+11+1
0000f4 93ec      	ST   X,R30
                 ; 0000 0042     *humi = buffer[0];
0000f5 81ec      	LDD  R30,Y+4
0000f6 85a9      	LDD  R26,Y+9
0000f7 85ba      	LDD  R27,Y+9+1
0000f8 93ec      	ST   X,R30
                 ; 0000 0043     return DHT_OK;
0000f9 e0e1      	LDI  R30,LOW(1)
                 _0x20E0003:
0000fa 940e 040e 	CALL __LOADLOCR4
0000fc 962d      	ADIW R28,13
0000fd 9508      	RET
                 ; 0000 0044 
                 ; 0000 0045 
                 ; 0000 0046 
                 ; 0000 0047 }
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 004A {
                 _main:
                 ; .FSTART _main
                 ; 0000 004B lcd_init(16);
0000fe e1a0      	LDI  R26,LOW(16)
0000ff d0a0      	RCALL _lcd_init
                 ; 0000 004C lcd_clear();
000100 940e 0390 	CALL SUBOPT_0x0
                 ; 0000 004D lcd_gotoxy(0,0);
                 ; 0000 004E 
                 ; 0000 004F DDRD = 0x80;
000102 e8e0      	LDI  R30,LOW(128)
000103 bbe1      	OUT  0x11,R30
                 ; 0000 0050 PORTD = 0x80;
000104 bbe2      	OUT  0x12,R30
                 ; 0000 0051 
                 ; 0000 0052 while (1)
                 _0x25:
                 ; 0000 0053     {
                 ; 0000 0054     // Please write your application code here
                 ; 0000 0055     if(DHT_GetTemHumi(&dht_nhiet_do, &dht_do_am)){
000105 e0e5      	LDI  R30,LOW(5)
000106 e0f0      	LDI  R31,HIGH(5)
000107 93fa      	ST   -Y,R31
000108 93ea      	ST   -Y,R30
000109 e0a4      	LDI  R26,LOW(4)
00010a e0b0      	LDI  R27,HIGH(4)
00010b df8c      	RCALL _DHT_GetTemHumi
00010c 30e0      	CPI  R30,0
00010d f101      	BREQ _0x28
                 ; 0000 0056         lcd_clear();
00010e 940e 0390 	CALL SUBOPT_0x0
                 ; 0000 0057         lcd_gotoxy(0,0);
                 ; 0000 0058         sprintf(data, "Do am %u", (uint8_t)dht_do_am);
000110 e0e0      	LDI  R30,LOW(_data)
000111 e0f5      	LDI  R31,HIGH(_data)
000112 93fa      	ST   -Y,R31
000113 93ea      	ST   -Y,R30
                +
000114 e9ee     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000115 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000116 93fa      	ST   -Y,R31
000117 93ea      	ST   -Y,R30
000118 2de4      	MOV  R30,R4
000119 940e 0397 	CALL SUBOPT_0x1
                 ; 0000 0059         lcd_puts(data);
                 ; 0000 005A         lcd_gotoxy(0,1);
00011b e0e0      	LDI  R30,LOW(0)
00011c 93ea      	ST   -Y,R30
00011d e0a1      	LDI  R26,LOW(1)
00011e d042      	RCALL _lcd_gotoxy
                 ; 0000 005B         sprintf(data,"Nhiet do %u", (uint8_t)dht_nhiet_do);
00011f e0e0      	LDI  R30,LOW(_data)
000120 e0f5      	LDI  R31,HIGH(_data)
000121 93fa      	ST   -Y,R31
000122 93ea      	ST   -Y,R30
                +
000123 eae7     +LDI R30 , LOW ( 2 * _0x0 + ( 9 ) )
000124 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 9 ) )
                 	__POINTW1FN _0x0,9
000125 93fa      	ST   -Y,R31
000126 93ea      	ST   -Y,R30
000127 2de5      	MOV  R30,R5
000128 940e 0397 	CALL SUBOPT_0x1
                 ; 0000 005C         lcd_puts(data);
                 ; 0000 005D         delay_ms(300);
00012a e2ac      	LDI  R26,LOW(300)
00012b e0b1      	LDI  R27,HIGH(300)
00012c 940e 03de 	CALL _delay_ms
                 ; 0000 005E     }
                 ; 0000 005F     }
                 _0x28:
00012e cfd6      	RJMP _0x25
                 ; 0000 0060 }
                 _0x29:
00012f cfff      	RJMP _0x29
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000130 93aa      	ST   -Y,R26
000131 81e8      	LD   R30,Y
000132 71e0      	ANDI R30,LOW(0x10)
000133 f011      	BREQ _0x2000004
000134 9adb      	SBI  0x1B,3
000135 c001      	RJMP _0x2000005
                 _0x2000004:
000136 98db      	CBI  0x1B,3
                 _0x2000005:
000137 81e8      	LD   R30,Y
000138 72e0      	ANDI R30,LOW(0x20)
000139 f011      	BREQ _0x2000006
00013a 9adc      	SBI  0x1B,4
00013b c001      	RJMP _0x2000007
                 _0x2000006:
00013c 98dc      	CBI  0x1B,4
                 _0x2000007:
00013d 81e8      	LD   R30,Y
00013e 74e0      	ANDI R30,LOW(0x40)
00013f f011      	BREQ _0x2000008
000140 9add      	SBI  0x1B,5
000141 c001      	RJMP _0x2000009
                 _0x2000008:
000142 98dd      	CBI  0x1B,5
                 _0x2000009:
000143 81e8      	LD   R30,Y
000144 78e0      	ANDI R30,LOW(0x80)
000145 f011      	BREQ _0x200000A
000146 9ade      	SBI  0x1B,6
000147 c001      	RJMP _0x200000B
                 _0x200000A:
000148 98de      	CBI  0x1B,6
                 _0x200000B:
                +
000149 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00014a 958a     +DEC R24
00014b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00014c 9ada      	SBI  0x1B,2
                +
00014d e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00014e 958a     +DEC R24
00014f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000150 98da      	CBI  0x1B,2
                +
000151 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000152 958a     +DEC R24
000153 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000154 c078      	RJMP _0x20E0002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000155 93aa      	ST   -Y,R26
000156 81a8      	LD   R26,Y
000157 dfd8      	RCALL __lcd_write_nibble_G100
000158 81e8          ld    r30,y
000159 95e2          swap  r30
00015a 83e8          st    y,r30
00015b 81a8      	LD   R26,Y
00015c dfd3      	RCALL __lcd_write_nibble_G100
                +
00015d e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00015e 958a     +DEC R24
00015f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000160 c06c      	RJMP _0x20E0002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000161 93aa      	ST   -Y,R26
000162 81e8      	LD   R30,Y
000163 e0f0      	LDI  R31,0
000164 5fe0      	SUBI R30,LOW(-__base_y_G100)
000165 4ffa      	SBCI R31,HIGH(-__base_y_G100)
000166 81e0      	LD   R30,Z
000167 81a9      	LDD  R26,Y+1
000168 0fae      	ADD  R26,R30
000169 dfeb      	RCALL __lcd_write_data
00016a 8079      	LDD  R7,Y+1
00016b 8068      	LDD  R6,Y+0
00016c 9622      	ADIW R28,2
00016d 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00016e e0a2      	LDI  R26,LOW(2)
00016f 940e 03a4 	CALL SUBOPT_0x2
000171 e0ac      	LDI  R26,LOW(12)
000172 dfe2      	RCALL __lcd_write_data
000173 e0a1      	LDI  R26,LOW(1)
000174 940e 03a4 	CALL SUBOPT_0x2
000176 e0e0      	LDI  R30,LOW(0)
000177 2e6e      	MOV  R6,R30
000178 2e7e      	MOV  R7,R30
000179 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00017a 93aa      	ST   -Y,R26
00017b 81a8      	LD   R26,Y
00017c 30aa      	CPI  R26,LOW(0xA)
00017d f011      	BREQ _0x2000011
00017e 1479      	CP   R7,R9
00017f f048      	BRLO _0x2000010
                 _0x2000011:
000180 e0e0      	LDI  R30,LOW(0)
000181 93ea      	ST   -Y,R30
000182 9463      	INC  R6
000183 2da6      	MOV  R26,R6
000184 dfdc      	RCALL _lcd_gotoxy
000185 81a8      	LD   R26,Y
000186 30aa      	CPI  R26,LOW(0xA)
000187 f409      	BRNE _0x2000013
000188 c044      	RJMP _0x20E0002
                 _0x2000013:
                 _0x2000010:
000189 9473      	INC  R7
00018a 9ad8      	SBI  0x1B,0
00018b 81a8      	LD   R26,Y
00018c dfc8      	RCALL __lcd_write_data
00018d 98d8      	CBI  0x1B,0
00018e c03e      	RJMP _0x20E0002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00018f 93ba      	ST   -Y,R27
000190 93aa      	ST   -Y,R26
000191 931a      	ST   -Y,R17
                 _0x2000014:
000192 81a9      	LDD  R26,Y+1
000193 81ba      	LDD  R27,Y+1+1
000194 91ed      	LD   R30,X+
000195 83a9      	STD  Y+1,R26
000196 83ba      	STD  Y+1+1,R27
000197 2f1e      	MOV  R17,R30
000198 30e0      	CPI  R30,0
000199 f019      	BREQ _0x2000016
00019a 2fa1      	MOV  R26,R17
00019b dfde      	RCALL _lcd_putchar
00019c cff5      	RJMP _0x2000014
                 _0x2000016:
00019d 8118      	LDD  R17,Y+0
00019e 9623      	ADIW R28,3
00019f 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0001a0 93aa      	ST   -Y,R26
0001a1 9ad3      	SBI  0x1A,3
0001a2 9ad4      	SBI  0x1A,4
0001a3 9ad5      	SBI  0x1A,5
0001a4 9ad6      	SBI  0x1A,6
0001a5 9ad2      	SBI  0x1A,2
0001a6 9ad0      	SBI  0x1A,0
0001a7 9ad1      	SBI  0x1A,1
0001a8 98da      	CBI  0x1B,2
0001a9 98d8      	CBI  0x1B,0
0001aa 98d9      	CBI  0x1B,1
0001ab 8098      	LDD  R9,Y+0
0001ac 81e8      	LD   R30,Y
0001ad 58e0      	SUBI R30,-LOW(128)
                +
0001ae 93e0 0512+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0001b0 81e8      	LD   R30,Y
0001b1 54e0      	SUBI R30,-LOW(192)
                +
0001b2 93e0 0513+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0001b4 e1a4      	LDI  R26,LOW(20)
0001b5 e0b0      	LDI  R27,0
0001b6 940e 03de 	CALL _delay_ms
0001b8 940e 03aa 	CALL SUBOPT_0x3
0001ba 940e 03aa 	CALL SUBOPT_0x3
0001bc 940e 03aa 	CALL SUBOPT_0x3
0001be e2a0      	LDI  R26,LOW(32)
0001bf df70      	RCALL __lcd_write_nibble_G100
                +
0001c0 ec88     +LDI R24 , LOW ( 200 )
0001c1 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0001c2 9701     +SBIW R24 , 1
0001c3 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0001c4 e2a8      	LDI  R26,LOW(40)
0001c5 df8f      	RCALL __lcd_write_data
0001c6 e0a4      	LDI  R26,LOW(4)
0001c7 df8d      	RCALL __lcd_write_data
0001c8 e8a5      	LDI  R26,LOW(133)
0001c9 df8b      	RCALL __lcd_write_data
0001ca e0a6      	LDI  R26,LOW(6)
0001cb df89      	RCALL __lcd_write_data
0001cc dfa1      	RCALL _lcd_clear
                 _0x20E0002:
0001cd 9621      	ADIW R28,1
0001ce 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G102:
                 ; .FSTART _put_buff_G102
0001cf 93ba      	ST   -Y,R27
0001d0 93aa      	ST   -Y,R26
0001d1 931a      	ST   -Y,R17
0001d2 930a      	ST   -Y,R16
0001d3 81aa      	LDD  R26,Y+2
0001d4 81bb      	LDD  R27,Y+2+1
0001d5 9612      	ADIW R26,2
0001d6 940e 03f8 	CALL __GETW1P
0001d8 9730      	SBIW R30,0
0001d9 f159      	BREQ _0x2040010
0001da 81aa      	LDD  R26,Y+2
0001db 81bb      	LDD  R27,Y+2+1
0001dc 9614      	ADIW R26,4
0001dd 940e 03f8 	CALL __GETW1P
0001df 018f      	MOVW R16,R30
0001e0 9730      	SBIW R30,0
0001e1 f061      	BREQ _0x2040012
                +
0001e2 3002     +CPI R16 , LOW ( 2 )
0001e3 e0e0     +LDI R30 , HIGH ( 2 )
0001e4 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0001e5 f098      	BRLO _0x2040013
0001e6 01f8      	MOVW R30,R16
0001e7 9731      	SBIW R30,1
0001e8 018f      	MOVW R16,R30
                +
0001e9 81aa     +LDD R26 , Y + 2
0001ea 81bb     +LDD R27 , Y + 2 + 1
0001eb 9614     +ADIW R26 , 4
0001ec 93ed     +ST X + , R30
0001ed 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2040012:
0001ee 81aa      	LDD  R26,Y+2
0001ef 81bb      	LDD  R27,Y+2+1
0001f0 9612      	ADIW R26,2
0001f1 91ed      	LD   R30,X+
0001f2 91fd      	LD   R31,X+
0001f3 9631      	ADIW R30,1
0001f4 93fe      	ST   -X,R31
0001f5 93ee      	ST   -X,R30
0001f6 9731      	SBIW R30,1
0001f7 81ac      	LDD  R26,Y+4
0001f8 83a0      	STD  Z+0,R26
                 _0x2040013:
0001f9 81aa      	LDD  R26,Y+2
0001fa 81bb      	LDD  R27,Y+2+1
0001fb 940e 03f8 	CALL __GETW1P
0001fd 23ff      	TST  R31
0001fe f02a      	BRMI _0x2040014
0001ff 91ed      	LD   R30,X+
000200 91fd      	LD   R31,X+
000201 9631      	ADIW R30,1
000202 93fe      	ST   -X,R31
000203 93ee      	ST   -X,R30
                 _0x2040014:
000204 c006      	RJMP _0x2040015
                 _0x2040010:
000205 81aa      	LDD  R26,Y+2
000206 81bb      	LDD  R27,Y+2+1
000207 efef      	LDI  R30,LOW(65535)
000208 efff      	LDI  R31,HIGH(65535)
000209 93ed      	ST   X+,R30
00020a 93fc      	ST   X,R31
                 _0x2040015:
00020b 8119      	LDD  R17,Y+1
00020c 8108      	LDD  R16,Y+0
00020d 9625      	ADIW R28,5
00020e 9508      	RET
                 ; .FEND
                 __print_G102:
                 ; .FSTART __print_G102
00020f 93ba      	ST   -Y,R27
000210 93aa      	ST   -Y,R26
000211 9726      	SBIW R28,6
000212 940e 0405 	CALL __SAVELOCR6
000214 e010      	LDI  R17,0
000215 85ac      	LDD  R26,Y+12
000216 85bd      	LDD  R27,Y+12+1
000217 e0e0      	LDI  R30,LOW(0)
000218 e0f0      	LDI  R31,HIGH(0)
000219 93ed      	ST   X+,R30
00021a 93fc      	ST   X,R31
                 _0x2040016:
00021b 89ea      	LDD  R30,Y+18
00021c 89fb      	LDD  R31,Y+18+1
00021d 9631      	ADIW R30,1
00021e 8bea      	STD  Y+18,R30
00021f 8bfb      	STD  Y+18+1,R31
000220 9731      	SBIW R30,1
000221 91e4      	LPM  R30,Z
000222 2f2e      	MOV  R18,R30
000223 30e0      	CPI  R30,0
000224 f409      	BRNE PC+2
000225 c115      	RJMP _0x2040018
000226 2fe1      	MOV  R30,R17
000227 30e0      	CPI  R30,0
000228 f439      	BRNE _0x204001C
000229 3225      	CPI  R18,37
00022a f411      	BRNE _0x204001D
00022b e011      	LDI  R17,LOW(1)
00022c c002      	RJMP _0x204001E
                 _0x204001D:
00022d 940e 03b2 	CALL SUBOPT_0x4
                 _0x204001E:
00022f c10a      	RJMP _0x204001B
                 _0x204001C:
000230 30e1      	CPI  R30,LOW(0x1)
000231 f4a9      	BRNE _0x204001F
000232 3225      	CPI  R18,37
000233 f419      	BRNE _0x2040020
000234 940e 03b2 	CALL SUBOPT_0x4
000236 c102      	RJMP _0x20400CC
                 _0x2040020:
000237 e012      	LDI  R17,LOW(2)
000238 e040      	LDI  R20,LOW(0)
000239 e000      	LDI  R16,LOW(0)
00023a 322d      	CPI  R18,45
00023b f411      	BRNE _0x2040021
00023c e001      	LDI  R16,LOW(1)
00023d c0fc      	RJMP _0x204001B
                 _0x2040021:
00023e 322b      	CPI  R18,43
00023f f411      	BRNE _0x2040022
000240 e24b      	LDI  R20,LOW(43)
000241 c0f8      	RJMP _0x204001B
                 _0x2040022:
000242 3220      	CPI  R18,32
000243 f411      	BRNE _0x2040023
000244 e240      	LDI  R20,LOW(32)
000245 c0f4      	RJMP _0x204001B
                 _0x2040023:
000246 c002      	RJMP _0x2040024
                 _0x204001F:
000247 30e2      	CPI  R30,LOW(0x2)
000248 f439      	BRNE _0x2040025
                 _0x2040024:
000249 e050      	LDI  R21,LOW(0)
00024a e013      	LDI  R17,LOW(3)
00024b 3320      	CPI  R18,48
00024c f411      	BRNE _0x2040026
00024d 6800      	ORI  R16,LOW(128)
00024e c0eb      	RJMP _0x204001B
                 _0x2040026:
00024f c003      	RJMP _0x2040027
                 _0x2040025:
000250 30e3      	CPI  R30,LOW(0x3)
000251 f009      	BREQ PC+2
000252 c0e7      	RJMP _0x204001B
                 _0x2040027:
000253 3320      	CPI  R18,48
000254 f010      	BRLO _0x204002A
000255 332a      	CPI  R18,58
000256 f008      	BRLO _0x204002B
                 _0x204002A:
000257 c007      	RJMP _0x2040029
                 _0x204002B:
000258 e0aa      	LDI  R26,LOW(10)
000259 9f5a      	MUL  R21,R26
00025a 2d50      	MOV  R21,R0
00025b 2fe2      	MOV  R30,R18
00025c 53e0      	SUBI R30,LOW(48)
00025d 0f5e      	ADD  R21,R30
00025e c0db      	RJMP _0x204001B
                 _0x2040029:
00025f 2fe2      	MOV  R30,R18
000260 36e3      	CPI  R30,LOW(0x63)
000261 f449      	BRNE _0x204002F
000262 940e 03b9 	CALL SUBOPT_0x5
000264 89e8      	LDD  R30,Y+16
000265 89f9      	LDD  R31,Y+16+1
000266 81a4      	LDD  R26,Z+4
000267 93aa      	ST   -Y,R26
000268 940e 03bf 	CALL SUBOPT_0x6
00026a c0ce      	RJMP _0x2040030
                 _0x204002F:
00026b 37e3      	CPI  R30,LOW(0x73)
00026c f441      	BRNE _0x2040032
00026d 940e 03b9 	CALL SUBOPT_0x5
00026f 940e 03c5 	CALL SUBOPT_0x7
000271 940e 0377 	CALL _strlen
000273 2f1e      	MOV  R17,R30
000274 c00a      	RJMP _0x2040033
                 _0x2040032:
000275 37e0      	CPI  R30,LOW(0x70)
000276 f461      	BRNE _0x2040035
000277 940e 03b9 	CALL SUBOPT_0x5
000279 940e 03c5 	CALL SUBOPT_0x7
00027b 940e 0383 	CALL _strlenf
00027d 2f1e      	MOV  R17,R30
00027e 6008      	ORI  R16,LOW(8)
                 _0x2040033:
00027f 6002      	ORI  R16,LOW(2)
000280 770f      	ANDI R16,LOW(127)
000281 e030      	LDI  R19,LOW(0)
000282 c034      	RJMP _0x2040036
                 _0x2040035:
000283 36e4      	CPI  R30,LOW(0x64)
000284 f011      	BREQ _0x2040039
000285 36e9      	CPI  R30,LOW(0x69)
000286 f411      	BRNE _0x204003A
                 _0x2040039:
000287 6004      	ORI  R16,LOW(4)
000288 c002      	RJMP _0x204003B
                 _0x204003A:
000289 37e5      	CPI  R30,LOW(0x75)
00028a f431      	BRNE _0x204003C
                 _0x204003B:
00028b e8ec      	LDI  R30,LOW(_tbl10_G102*2)
00028c e0f0      	LDI  R31,HIGH(_tbl10_G102*2)
00028d 83ee      	STD  Y+6,R30
00028e 83ff      	STD  Y+6+1,R31
00028f e015      	LDI  R17,LOW(5)
000290 c00c      	RJMP _0x204003D
                 _0x204003C:
000291 35e8      	CPI  R30,LOW(0x58)
000292 f411      	BRNE _0x204003F
000293 6008      	ORI  R16,LOW(8)
000294 c003      	RJMP _0x2040040
                 _0x204003F:
000295 37e8      	CPI  R30,LOW(0x78)
000296 f009      	BREQ PC+2
000297 c0a1      	RJMP _0x2040071
                 _0x2040040:
000298 e9e6      	LDI  R30,LOW(_tbl16_G102*2)
000299 e0f0      	LDI  R31,HIGH(_tbl16_G102*2)
00029a 83ee      	STD  Y+6,R30
00029b 83ff      	STD  Y+6+1,R31
00029c e014      	LDI  R17,LOW(4)
                 _0x204003D:
00029d ff02      	SBRS R16,2
00029e c014      	RJMP _0x2040042
00029f 940e 03b9 	CALL SUBOPT_0x5
0002a1 940e 03cf 	CALL SUBOPT_0x8
0002a3 85ab      	LDD  R26,Y+11
0002a4 23aa      	TST  R26
0002a5 f43a      	BRPL _0x2040043
0002a6 85ea      	LDD  R30,Y+10
0002a7 85fb      	LDD  R31,Y+10+1
0002a8 940e 03ec 	CALL __ANEGW1
0002aa 87ea      	STD  Y+10,R30
0002ab 87fb      	STD  Y+10+1,R31
0002ac e24d      	LDI  R20,LOW(45)
                 _0x2040043:
0002ad 3040      	CPI  R20,0
0002ae f011      	BREQ _0x2040044
0002af 5f1f      	SUBI R17,-LOW(1)
0002b0 c001      	RJMP _0x2040045
                 _0x2040044:
0002b1 7f0b      	ANDI R16,LOW(251)
                 _0x2040045:
0002b2 c004      	RJMP _0x2040046
                 _0x2040042:
0002b3 940e 03b9 	CALL SUBOPT_0x5
0002b5 940e 03cf 	CALL SUBOPT_0x8
                 _0x2040046:
                 _0x2040036:
0002b7 fd00      	SBRC R16,0
0002b8 c011      	RJMP _0x2040047
                 _0x2040048:
0002b9 1715      	CP   R17,R21
0002ba f478      	BRSH _0x204004A
0002bb ff07      	SBRS R16,7
0002bc c008      	RJMP _0x204004B
0002bd ff02      	SBRS R16,2
0002be c004      	RJMP _0x204004C
0002bf 7f0b      	ANDI R16,LOW(251)
0002c0 2f24      	MOV  R18,R20
0002c1 5011      	SUBI R17,LOW(1)
0002c2 c001      	RJMP _0x204004D
                 _0x204004C:
0002c3 e320      	LDI  R18,LOW(48)
                 _0x204004D:
0002c4 c001      	RJMP _0x204004E
                 _0x204004B:
0002c5 e220      	LDI  R18,LOW(32)
                 _0x204004E:
0002c6 940e 03b2 	CALL SUBOPT_0x4
0002c8 5051      	SUBI R21,LOW(1)
0002c9 cfef      	RJMP _0x2040048
                 _0x204004A:
                 _0x2040047:
0002ca 2f31      	MOV  R19,R17
0002cb ff01      	SBRS R16,1
0002cc c017      	RJMP _0x204004F
                 _0x2040050:
0002cd 3030      	CPI  R19,0
0002ce f0a1      	BREQ _0x2040052
0002cf ff03      	SBRS R16,3
0002d0 c006      	RJMP _0x2040053
0002d1 81ee      	LDD  R30,Y+6
0002d2 81ff      	LDD  R31,Y+6+1
0002d3 9125      	LPM  R18,Z+
0002d4 83ee      	STD  Y+6,R30
0002d5 83ff      	STD  Y+6+1,R31
0002d6 c005      	RJMP _0x2040054
                 _0x2040053:
0002d7 81ae      	LDD  R26,Y+6
0002d8 81bf      	LDD  R27,Y+6+1
0002d9 912d      	LD   R18,X+
0002da 83ae      	STD  Y+6,R26
0002db 83bf      	STD  Y+6+1,R27
                 _0x2040054:
0002dc 940e 03b2 	CALL SUBOPT_0x4
0002de 3050      	CPI  R21,0
0002df f009      	BREQ _0x2040055
0002e0 5051      	SUBI R21,LOW(1)
                 _0x2040055:
0002e1 5031      	SUBI R19,LOW(1)
0002e2 cfea      	RJMP _0x2040050
                 _0x2040052:
0002e3 c04b      	RJMP _0x2040056
                 _0x204004F:
                 _0x2040058:
0002e4 e320      	LDI  R18,LOW(48)
0002e5 81ee      	LDD  R30,Y+6
0002e6 81ff      	LDD  R31,Y+6+1
0002e7 940e 03fc 	CALL __GETW1PF
0002e9 87e8      	STD  Y+8,R30
0002ea 87f9      	STD  Y+8+1,R31
0002eb 81ee      	LDD  R30,Y+6
0002ec 81ff      	LDD  R31,Y+6+1
0002ed 9632      	ADIW R30,2
0002ee 83ee      	STD  Y+6,R30
0002ef 83ff      	STD  Y+6+1,R31
                 _0x204005A:
0002f0 85e8      	LDD  R30,Y+8
0002f1 85f9      	LDD  R31,Y+8+1
0002f2 85aa      	LDD  R26,Y+10
0002f3 85bb      	LDD  R27,Y+10+1
0002f4 17ae      	CP   R26,R30
0002f5 07bf      	CPC  R27,R31
0002f6 f050      	BRLO _0x204005C
0002f7 5f2f      	SUBI R18,-LOW(1)
0002f8 85a8      	LDD  R26,Y+8
0002f9 85b9      	LDD  R27,Y+8+1
0002fa 85ea      	LDD  R30,Y+10
0002fb 85fb      	LDD  R31,Y+10+1
0002fc 1bea      	SUB  R30,R26
0002fd 0bfb      	SBC  R31,R27
0002fe 87ea      	STD  Y+10,R30
0002ff 87fb      	STD  Y+10+1,R31
000300 cfef      	RJMP _0x204005A
                 _0x204005C:
000301 332a      	CPI  R18,58
000302 f028      	BRLO _0x204005D
000303 ff03      	SBRS R16,3
000304 c002      	RJMP _0x204005E
000305 5f29      	SUBI R18,-LOW(7)
000306 c001      	RJMP _0x204005F
                 _0x204005E:
000307 5d29      	SUBI R18,-LOW(39)
                 _0x204005F:
                 _0x204005D:
000308 fd04      	SBRC R16,4
000309 c01a      	RJMP _0x2040061
00030a 3321      	CPI  R18,49
00030b f420      	BRSH _0x2040063
00030c 85a8      	LDD  R26,Y+8
00030d 85b9      	LDD  R27,Y+8+1
00030e 9711      	SBIW R26,1
00030f f409      	BRNE _0x2040062
                 _0x2040063:
000310 c009      	RJMP _0x20400CD
                 _0x2040062:
000311 1753      	CP   R21,R19
000312 f010      	BRLO _0x2040067
000313 ff00      	SBRS R16,0
000314 c001      	RJMP _0x2040068
                 _0x2040067:
000315 c013      	RJMP _0x2040066
                 _0x2040068:
000316 e220      	LDI  R18,LOW(32)
000317 ff07      	SBRS R16,7
000318 c00b      	RJMP _0x2040069
000319 e320      	LDI  R18,LOW(48)
                 _0x20400CD:
00031a 6100      	ORI  R16,LOW(16)
00031b ff02      	SBRS R16,2
00031c c007      	RJMP _0x204006A
00031d 7f0b      	ANDI R16,LOW(251)
00031e 934a      	ST   -Y,R20
00031f 940e 03bf 	CALL SUBOPT_0x6
000321 3050      	CPI  R21,0
000322 f009      	BREQ _0x204006B
000323 5051      	SUBI R21,LOW(1)
                 _0x204006B:
                 _0x204006A:
                 _0x2040069:
                 _0x2040061:
000324 940e 03b2 	CALL SUBOPT_0x4
000326 3050      	CPI  R21,0
000327 f009      	BREQ _0x204006C
000328 5051      	SUBI R21,LOW(1)
                 _0x204006C:
                 _0x2040066:
000329 5031      	SUBI R19,LOW(1)
00032a 85a8      	LDD  R26,Y+8
00032b 85b9      	LDD  R27,Y+8+1
00032c 9712      	SBIW R26,2
00032d f008      	BRLO _0x2040059
00032e cfb5      	RJMP _0x2040058
                 _0x2040059:
                 _0x2040056:
00032f ff00      	SBRS R16,0
000330 c008      	RJMP _0x204006D
                 _0x204006E:
000331 3050      	CPI  R21,0
000332 f031      	BREQ _0x2040070
000333 5051      	SUBI R21,LOW(1)
000334 e2e0      	LDI  R30,LOW(32)
000335 93ea      	ST   -Y,R30
000336 940e 03bf 	CALL SUBOPT_0x6
000338 cff8      	RJMP _0x204006E
                 _0x2040070:
                 _0x204006D:
                 _0x2040071:
                 _0x2040030:
                 _0x20400CC:
000339 e010      	LDI  R17,LOW(0)
                 _0x204001B:
00033a cee0      	RJMP _0x2040016
                 _0x2040018:
00033b 85ac      	LDD  R26,Y+12
00033c 85bd      	LDD  R27,Y+12+1
00033d 940e 03f8 	CALL __GETW1P
00033f 940e 040c 	CALL __LOADLOCR6
000341 9664      	ADIW R28,20
000342 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000343 92ff      	PUSH R15
000344 2ef8      	MOV  R15,R24
000345 9726      	SBIW R28,6
000346 940e 0407 	CALL __SAVELOCR4
000348 940e 03d7 	CALL SUBOPT_0x9
00034a 9730      	SBIW R30,0
00034b f419      	BRNE _0x2040072
00034c efef      	LDI  R30,LOW(65535)
00034d efff      	LDI  R31,HIGH(65535)
00034e c023      	RJMP _0x20E0001
                 _0x2040072:
00034f 01de      	MOVW R26,R28
000350 9616      	ADIW R26,6
000351 940e 03e8 	CALL __ADDW2R15
000353 018d      	MOVW R16,R26
000354 940e 03d7 	CALL SUBOPT_0x9
000356 83ee      	STD  Y+6,R30
000357 83ff      	STD  Y+6+1,R31
000358 e0e0      	LDI  R30,LOW(0)
000359 87e8      	STD  Y+8,R30
00035a 87e9      	STD  Y+8+1,R30
00035b 01de      	MOVW R26,R28
00035c 961a      	ADIW R26,10
00035d 940e 03e8 	CALL __ADDW2R15
00035f 940e 03f8 	CALL __GETW1P
000361 93fa      	ST   -Y,R31
000362 93ea      	ST   -Y,R30
000363 931a      	ST   -Y,R17
000364 930a      	ST   -Y,R16
000365 ecef      	LDI  R30,LOW(_put_buff_G102)
000366 e0f1      	LDI  R31,HIGH(_put_buff_G102)
000367 93fa      	ST   -Y,R31
000368 93ea      	ST   -Y,R30
000369 01de      	MOVW R26,R28
00036a 961a      	ADIW R26,10
00036b dea3      	RCALL __print_G102
00036c 019f      	MOVW R18,R30
00036d 81ae      	LDD  R26,Y+6
00036e 81bf      	LDD  R27,Y+6+1
00036f e0e0      	LDI  R30,LOW(0)
000370 93ec      	ST   X,R30
000371 01f9      	MOVW R30,R18
                 _0x20E0001:
000372 940e 040e 	CALL __LOADLOCR4
000374 962a      	ADIW R28,10
000375 90ff      	POP  R15
000376 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000377 93ba      	ST   -Y,R27
000378 93aa      	ST   -Y,R26
000379 91a9          ld   r26,y+
00037a 91b9          ld   r27,y+
00037b 27ee          clr  r30
00037c 27ff          clr  r31
                 strlen0:
00037d 916d          ld   r22,x+
00037e 2366          tst  r22
00037f f011          breq strlen1
000380 9631          adiw r30,1
000381 cffb          rjmp strlen0
                 strlen1:
000382 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000383 93ba      	ST   -Y,R27
000384 93aa      	ST   -Y,R26
000385 27aa          clr  r26
000386 27bb          clr  r27
000387 91e9          ld   r30,y+
000388 91f9          ld   r31,y+
                 strlenf0:
000389 9005      	lpm  r0,z+
00038a 2000          tst  r0
00038b f011          breq strlenf1
00038c 9611          adiw r26,1
00038d cffb          rjmp strlenf0
                 strlenf1:
00038e 01fd          movw r30,r26
00038f 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _data:
000500           	.BYTE 0x10
                 __base_y_G100:
000510           	.BYTE 0x4
                 __seed_G101:
000514           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
000390 940e 016e 	CALL _lcd_clear
000392 e0e0      	LDI  R30,LOW(0)
000393 93ea      	ST   -Y,R30
000394 e0a0      	LDI  R26,LOW(0)
000395 940c 0161 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x1:
000397 27ff      	CLR  R31
000398 2766      	CLR  R22
000399 2777      	CLR  R23
00039a 940e 0400 	CALL __PUTPARD1
00039c e084      	LDI  R24,4
00039d 940e 0343 	CALL _sprintf
00039f 9628      	ADIW R28,8
0003a0 e0a0      	LDI  R26,LOW(_data)
0003a1 e0b5      	LDI  R27,HIGH(_data)
0003a2 940c 018f 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
0003a4 940e 0155 	CALL __lcd_write_data
0003a6 e0a3      	LDI  R26,LOW(3)
0003a7 e0b0      	LDI  R27,0
0003a8 940c 03de 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3:
0003aa e3a0      	LDI  R26,LOW(48)
0003ab 940e 0130 	CALL __lcd_write_nibble_G100
                +
0003ad ec88     +LDI R24 , LOW ( 200 )
0003ae e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0003af 9701     +SBIW R24 , 1
0003b0 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0003b1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x4:
0003b2 932a      	ST   -Y,R18
0003b3 85ad      	LDD  R26,Y+13
0003b4 85be      	LDD  R27,Y+13+1
0003b5 85ef      	LDD  R30,Y+15
0003b6 89f8      	LDD  R31,Y+15+1
0003b7 9509      	ICALL
0003b8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5:
0003b9 89e8      	LDD  R30,Y+16
0003ba 89f9      	LDD  R31,Y+16+1
0003bb 9734      	SBIW R30,4
0003bc 8be8      	STD  Y+16,R30
0003bd 8bf9      	STD  Y+16+1,R31
0003be 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
0003bf 85ad      	LDD  R26,Y+13
0003c0 85be      	LDD  R27,Y+13+1
0003c1 85ef      	LDD  R30,Y+15
0003c2 89f8      	LDD  R31,Y+15+1
0003c3 9509      	ICALL
0003c4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x7:
0003c5 89a8      	LDD  R26,Y+16
0003c6 89b9      	LDD  R27,Y+16+1
0003c7 9614      	ADIW R26,4
0003c8 940e 03f8 	CALL __GETW1P
0003ca 83ee      	STD  Y+6,R30
0003cb 83ff      	STD  Y+6+1,R31
0003cc 81ae      	LDD  R26,Y+6
0003cd 81bf      	LDD  R27,Y+6+1
0003ce 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x8:
0003cf 89a8      	LDD  R26,Y+16
0003d0 89b9      	LDD  R27,Y+16+1
0003d1 9614      	ADIW R26,4
0003d2 940e 03f8 	CALL __GETW1P
0003d4 87ea      	STD  Y+10,R30
0003d5 87fb      	STD  Y+10+1,R31
0003d6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
0003d7 01de      	MOVW R26,R28
0003d8 961c      	ADIW R26,12
0003d9 940e 03e8 	CALL __ADDW2R15
0003db 940e 03f8 	CALL __GETW1P
0003dd 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0003de 9610      	adiw r26,0
0003df f039      	breq __delay_ms1
                 __delay_ms0:
                +
0003e0 ed80     +LDI R24 , LOW ( 0x7D0 )
0003e1 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0003e2 9701     +SBIW R24 , 1
0003e3 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0003e4 95a8      	wdr
0003e5 9711      	sbiw r26,1
0003e6 f7c9      	brne __delay_ms0
                 __delay_ms1:
0003e7 9508      	ret
                 
                 __ADDW2R15:
0003e8 2400      	CLR  R0
0003e9 0daf      	ADD  R26,R15
0003ea 1db0      	ADC  R27,R0
0003eb 9508      	RET
                 
                 __ANEGW1:
0003ec 95f1      	NEG  R31
0003ed 95e1      	NEG  R30
0003ee 40f0      	SBCI R31,0
0003ef 9508      	RET
                 
                 __LSLB12:
0003f0 23ee      	TST  R30
0003f1 2e0e      	MOV  R0,R30
0003f2 2fea      	MOV  R30,R26
0003f3 f019      	BREQ __LSLB12R
                 __LSLB12L:
0003f4 0fee      	LSL  R30
0003f5 940a      	DEC  R0
0003f6 f7e9      	BRNE __LSLB12L
                 __LSLB12R:
0003f7 9508      	RET
                 
                 __GETW1P:
0003f8 91ed      	LD   R30,X+
0003f9 91fc      	LD   R31,X
0003fa 9711      	SBIW R26,1
0003fb 9508      	RET
                 
                 __GETW1PF:
0003fc 9005      	LPM  R0,Z+
0003fd 91f4      	LPM  R31,Z
0003fe 2de0      	MOV  R30,R0
0003ff 9508      	RET
                 
                 __PUTPARD1:
000400 937a      	ST   -Y,R23
000401 936a      	ST   -Y,R22
000402 93fa      	ST   -Y,R31
000403 93ea      	ST   -Y,R30
000404 9508      	RET
                 
                 __SAVELOCR6:
000405 935a      	ST   -Y,R21
                 __SAVELOCR5:
000406 934a      	ST   -Y,R20
                 __SAVELOCR4:
000407 933a      	ST   -Y,R19
                 __SAVELOCR3:
000408 932a      	ST   -Y,R18
                 __SAVELOCR2:
000409 931a      	ST   -Y,R17
00040a 930a      	ST   -Y,R16
00040b 9508      	RET
                 
                 __LOADLOCR6:
00040c 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00040d 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00040e 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00040f 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000410 8119      	LDD  R17,Y+1
000411 8108      	LD   R16,Y
000412 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  13 r1 :   3 r2 :   0 r3 :   0 r4 :   1 r5 :   1 r6 :   4 r7 :   4 
r8 :   0 r9 :   2 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  38 r17:  28 r18:  29 r19:  10 r20:   9 r21:  17 r22:   8 r23:   2 
r24:  32 r25:   5 r26: 114 r27:  45 r28:  17 r29:   1 r30: 190 r31:  66 
x  :  26 y  : 194 z  :  16 
Registers used: 27 out of 35 (77.1%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   7 
adiw  :  26 and   :   0 andi  :   8 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  24 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  35 brpl  :   1 brsh  :   4 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  58 
cbi   :  11 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  10 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   5 cpc   :   2 cpi   :  36 cpse  :   0 dec   :  10 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 
ijmp  :   0 in    :   0 inc   :   2 jmp   :  39 ld    :  29 ldd   :  88 
ldi   : 115 lds   :   0 lpm   :  14 lsl   :   1 lsr   :   0 mov   :  22 
movw  :  17 mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 
or    :   1 ori   :   6 out   :   8 pop   :   1 push  :   1 rcall :  17 
ret   :  26 reti  :   0 rjmp  :  75 rol   :   0 ror   :   0 sbc   :   1 
sbci  :   2 sbi   :  16 sbic  :   3 sbis  :   4 sbiw  :  20 sbr   :   0 
sbrc  :   2 sbrs  :  10 sec   :   0 seh   :   0 sei   :   0 sen   :   0 
ser   :   0 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  72 std   :  35 sts   :   3 sub   :   2 subi  :  18 
swap  :   1 tst   :   5 wdr   :   1 
Instructions used: 54 out of 117 (46.2%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000826   2018     68   2086  131072   1.6%
[.dseg] 0x000100 0x000518      0     24     24    4096   0.6%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 8 warnings
